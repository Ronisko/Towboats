
type PACKET extends FRAME is record of
	nadawca				: INTEGER
	holowniki			: array [] of INTEGER
	priorytet			: INTEGER
	type				: MESSAGE
end record

liczbaPotrzebnychHolowników		: INTEGER
pcktOut							: PACKET
holownikiDostępne 				: array [] of BOOLEAN
holownikiZarezerwowane			: array [] of BOOLEAN
oczekiwanieNaZwolnienie			: array [] of INTEGER
statkiAktywne 					: array [] of BOOLEAN
priorytety						: array [] of DOUBLE

when e_internal(Pi, *) { do
	for (int j = 0; j < S; ++j)
	 	statkiAktywne[j] = true;

	priorytet := timestamp(); // początkowy priorytet zgodny z kolejnością utworzenia poszczególnych statków
	holownikiDostępne = H; // wszystkie holowniki są dostępne
	liczbaPotrzebnychHolowników = h[i]; 
} end when;

when e_send(Pi, Pj, msgOut: MESSAGE) { do
	pcktOut.holowniki = holownikiZarezerwowane; // załadowanie informacji o zagarniętych holownikach używane przy "WEJŚCIE" i "ZWOLNIENIE"
	pcktOut.priorytet := priorytet; // informacja o priorytecie używane przy "ŻĄDANIE"
	pcktOut.type := msgOut;
	send(Qi, Qj, pcktOut);
} end when;

when e_receive(Qj, Qi, pcktIn: PACKET) { do
	// jeśli otrzymaliśmy "ŻĄDANIE":
	if (pcktIn.type == "ŻĄDANIE") {
		priorytety[j] = pcktIn.priorytet;
		statkiAktywne[i] = true; // oznaczamy statek nadawcę jako aktywny
	}
	// jeśli otrzymaliśmy "WEJŚCIE":
	if (pcktIn.type == "WEJŚCIE") {
		removeFrom(holownikiDostępne, pcktIn.holowniki);// usuwamy zagarnięte holowniki z dostępnych
		dodajDoOczekiwanych(pcktIn.holowniki, oczekiwanieNaZwolnienie); // przypisanie do tablicy oczekiwanieNaZwolnienie tida użytkownika, który je posiada
		statkiAktywne[j] = false; // usuwamy statek będący w sekcji krytycznej z aktywnych
	}
	// jeśli otrzymaliśmy "ZWOLNIENIE":
	if (pcktIn.type == "ZWOLNIENIE") {
		usunOczekiwaneOtrzymane(pcktIn.holowniki, oczekiwanieNaZwolnienie); // usun z oczekiwanych otrzymane od właściwego tida
		holownikiDostępne.push(pcktIn.holowniki); // dodajemy zwolnione holowniki do dostępnych
	}
	
} end when;

while (true) {
		e_receive();
	
		// sekcja lokalna
		sleep(1);
		// sekcja lokalna

		e_receive();
		activeShips[i] = true;
		priorities[myIndex] = timestamp();
		e_send(0, REQUEST);

		e_receive();

		while (!isAvailable()) {
			e_receive();
		}

		while ( !allNeededReserved() ) {
			if (numberOf(availableTowboats) > 0) {	
				reserveTowboats();
				usunZAktywnych(holownikiZarezerwowane);
			}
			e_receive();
		}
		activeShips[i] = false; 
		e_send(0, ENTRY);
			
		e_receive();
		
		// sekcja krytyczna
		sleep(1);
		// sekcja krytyczna
		
		e_receive();
		addTowboats(holownikiZarezerwowane);
		e_send(0, RELEASE);
		emptyArray(holownikiZarezerwowane, numberOfTowboats);
	}
}
//TODO pozmieniać push na odwołanie się do indeksu tablicy